/**
 * Author: Rahul Gupta
 * Title: Permutations – In-Place Backtracking using Swapping
 *
 * Description:
 * This Java program generates all possible permutations of an array of distinct integers
 * using in-place swapping to build permutations efficiently.
 *
 * The recursion is driven by an index pointer. At each level, it swaps the current index
 * with every index >= it (to generate new permutations), recurses forward, and then
 * backtracks by undoing the swap.
 *
 * Input Example:
 * nums = [1, 2, 3]
 *
 * Output Example:
 * [
 *   [1, 2, 3],
 *   [1, 3, 2],
 *   [2, 1, 3],
 *   [2, 3, 1],
 *   [3, 2, 1],
 *   [3, 1, 2]
 * ]
 * 
 * -------------------------------------------------------------
 * Time Complexity: O(N × N!)
 *   - N! permutations × O(N) time to copy each permutation.
 *
 * Space Complexity:
 *   - Auxiliary Stack Space: O(N) due to recursion
 *   - No extra space for freq[], works in-place
 * -------------------------------------------------------------
 */

import java.util.*;

public class Solution {
    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> res = new ArrayList<>();
        recurPermute(0, nums, res);
        return res;
    }

    private void recurPermute(int index, int[] nums, List<List<Integer>> res) {
        if (index == nums.length) {
            List<Integer> current = new ArrayList<>();
            for (int num : nums) {
                current.add(num);
            }
            res.add(current);
            return;
        }

        for (int i = index; i < nums.length; i++) {
            swap(i, index, nums);
            recurPermute(index + 1, nums, res);
            swap(i, index, nums); // backtrack
        }
    }

    private void swap(int i, int j, int[] nums) {
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }
}


                             [1, 2, 3] (index = 0)
            ____________________|_____________________
           |                    |                    |
   swap(0,0)               swap(0,1)             swap(0,2)
       |                      |                    |
   [1, 2, 3]              [2, 1, 3]             [3, 2, 1] (index = 1)
     |                      |                    |
  ____|____              ____|____           ____|____
 |         |            |         |         |         |
s(1,1)   s(1,2)       s(1,1)   s(1,2)      s(1,1)   s(1,2)
 |         |            |         |         |         |
[1,2,3] [1,3,2]     [2,1,3] [2,3,1]    [3,2,1] [3,1,2] (index = 2)
  |        |            |        |         |       |
✅       ✅         ✅       ✅        ✅      ✅
